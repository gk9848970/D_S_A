// Binary Search

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size() - 1;
        
        while(start <= end) {
            int mid = (start + end) / 2;
            int mid = start + ((end - start) / 2);


            if(nums.at(mid) == target) return mid;
            else if(nums.at(mid) > target) end = mid - 1;
            else if(nums.at(mid) < target) start = mid + 1;
        }
        return -1;
    }
};

// Find First and Last Position of Element in Sorted Array

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = -1, second = -1;
        vector<int> v;
        
        if(nums.size() == 0) {
            v.push_back(first);
            v.push_back(second);
            return v;
        }
        
        
        class Solution {
public:
    int findMin(vector<int>& n) {
        int s=0,l=n.size();
        int e =l-1;
        while(s<e){
            int m = s+(e-s)/2;
            if(n[m] > n[e]) s=m+1;          // left side has small values (rotated array)
            else if(n[m] < n[e]) e=m;       // right side has small value (not rotated)
            else e--;                       // mid value equal to end move towards small
        }
        return n[s];
    }
        
        int start = 0;
        int end = nums.size() - 1;
        
        while(start <= end) {
            int mid = (start + end) / 2;

            if(nums.at(mid) == target) {
                first = mid;
                end = mid - 1;
            }
            
            else if(nums.at(mid) > target) end = mid - 1;
            else if(nums.at(mid) < target) start = mid + 1;
        }
        
        start = 0;
        end = nums.size() - 1;
        
        while(start <= end) {
            int mid = (start + end) / 2;

            if(nums.at(mid) == target) {
                second = mid;
                start = mid + 1;
            }
            
            else if(nums.at(mid) > target) end = mid - 1;
            else if(nums.at(mid) < target) start = mid + 1;
        }
        
        v.push_back(first);
        v.push_back(second);
        return v;
    }
};

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        int start = 0;
        int end = n - 1;
        
        while(start <= end) {
            if(nums.at(start) <= (nums.at(end))) {
                return nums.at(start);
            }
            
            int mid = (start + end) / 2;
            int prev = (mid - 1 + n) % n;
            int next = (mid + 1) % n;
               
            if(nums.at(mid) <= nums.at(prev) && nums.at(mid) <= nums.at(next))                  {
                return nums.at(mid);
            }
            
            else if(nums.at(start) <= nums.at(mid)) start = mid + 1;
            else if(nums.at(mid) <= nums.at(end)) end = mid - 1;                   
            }
        
        return -1;
        }
};

class Solution {
public:
    int ans(vector<int>& arr, int target, int low, int high) {
            while(low <= high) {
                int mid = (low + high) / 2;

                if(arr.at(mid) == target) return mid;
                else if (arr.at(mid) > target) high = mid - 1;
                else low = mid + 1;
            }

            return -1;
    }
    
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int start = 0;
        int end = n - 1;
        int indexMin {-1};
        
        while(start <= end) {
                if(nums.at(start) <= (nums.at(end))) {
                    indexMin = start;
                    break;
                }

                int mid = (start + end) / 2;

                if (nums.at(start) <= nums.at(mid)) start = mid + 1;
                else if(nums.at(mid) <= nums.at(end)) end = mid;                   
        }
        
        int leftSearch = ans(nums, target, 0, indexMin-1);
        int rightSearch = ans(nums, target, indexMin, n - 1);
        
        if(leftSearch != -1) return leftSearch;
        else if(rightSearch != -1) return rightSearch;
        
        return -1;
    }
};
