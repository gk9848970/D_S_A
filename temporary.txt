// Binary Search

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size() - 1;
        
        while(start <= end) {
            int mid = (start + end) / 2;
            int mid = start + ((end - start) / 2);


            if(nums.at(mid) == target) return mid;
            else if(nums.at(mid) > target) end = mid - 1;
            else if(nums.at(mid) < target) start = mid + 1;
        }
        return -1;
    }
};

// Find First and Last Position of Element in Sorted Array

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = -1, second = -1;
        vector<int> v;
        
        if(nums.size() == 0) {
            v.push_back(first);
            v.push_back(second);
            return v;
        }
        
        int start = 0;
        int end = nums.size() - 1;
        
        while(start <= end) {
            int mid = (start + end) / 2;

            if(nums.at(mid) == target) {
                first = mid;
                end = mid - 1;
            }
            
            else if(nums.at(mid) > target) end = mid - 1;
            else if(nums.at(mid) < target) start = mid + 1;
        }
        
        start = 0;
        end = nums.size() - 1;
        
        while(start <= end) {
            int mid = (start + end) / 2;

            if(nums.at(mid) == target) {
                second = mid;
                start = mid + 1;
            }
            
            else if(nums.at(mid) > target) end = mid - 1;
            else if(nums.at(mid) < target) start = mid + 1;
        }
        
        v.push_back(first);
        v.push_back(second);
        return v;
    }
};

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        int start = 0;
        int end = n - 1;
        
        
        while(start <= end) {
            if(nums.at(start) <= (nums.at(end)) {
                return n;
            }
            
            int mid = (start + end) / 2;
            int prev = (mid - 1 + n) % n;
            int next = (mid + 1) % n;
               
            if(nums.at(mid) <= nums.at(prev) && nums.at(mid) <= nums.at(next)) {
                return mid;
            }
            
            if(nums.at(start) <= nums.at(prev))
        }
                                  
}  
