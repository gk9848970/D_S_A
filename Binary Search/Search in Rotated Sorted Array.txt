// 33. Search in Rotated Sorted Array

int ans(vector<int>& arr, int target, int low, int high) {
            while(low <= high) {
                int mid = (low + high) / 2;

                if(arr.at(mid) == target) return mid;
                else if (arr.at(mid) > target) high = mid - 1;
                else low = mid + 1;
            }

            return -1;
    }
    
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int start = 0;
        int end = n - 1;
        int indexMin {-1};
        
        while(start <= end) {
                if(nums.at(start) <= (nums.at(end))) {
                    indexMin = start;
                    break;
                }

                int mid = (start + end) / 2;

                if (nums.at(start) <= nums.at(mid)) start = mid + 1;
                else if(nums.at(mid) <= nums.at(end)) end = mid;                   
        }
        
        int leftSearch = ans(nums, target, 0, indexMin-1);
        int rightSearch = ans(nums, target, indexMin, n - 1);
        
        if(leftSearch != -1) return leftSearch;
        else if(rightSearch != -1) return rightSearch;
        
        return -1;
    }